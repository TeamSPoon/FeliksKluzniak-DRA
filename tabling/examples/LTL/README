--------------------------------------------------------------------------------

NOTE: 1. Each of the examples in this directory has two versions:

           - A file whose name ends with ".tlp" is for direct execution in
             "dra" (i.e., "verifier.tlp" is used without translation).

           - A file whose name ends with ".pl" includes the translated
             version of the verifier (i.e., "verifier.pl").  The example can
             be executed by "dra" (by specifying the entire file name,
             together with the extension).  It can also be executed directly
             in Prolog, but some queries may loop, and will have to be
             interrupted by the user.

      2. If you want to try the examples directly in your logic programming
          system (without tabling), then it's best to comment out the
          directive ":- tabled tverify_ / 3." in "verifier.pl".



..........................................................................

This directory includes the following files:

verifier.tlp:

        A version of Gopal Gupta's elegant "interpreter for Linear Temporal
        Logic" (more specifically, a program that verifies whether a given
        LTL formula holds in a given state of a given automaton).

        The program contains both tabled and coinductive predicates
        (however, each predicate is either tabled or coinductive, not
        both). It can be executed as follows:

          (1) Use "../../../coind/translate.colp" to translate
             "verifier.tlp" into "verifier.pl".

          (2) Load a concrete example that includes the translated verifier
              into an implementation of tabled logic programming, and then
              issue queries relevant to the example.

              (The example would contain a definition of an automaton,
              possibly with some queries.  File inclusion is done with a
              directive:
                   :-[ 'verifier.pl' ].
              The "dra" interpreter is an implementation of tabled logic
              programming.)

        Since the "dra" interpreter also supports coinductive programming
        directly, the translation step can be omitted.

normalize.pl:
        Simple normalization of LTL expressions, used by
        "interpreter.tlp".

errors.tlp:
        A version of "example3.tlp" into which a number of errors have been
        introduced to test the diagnostics of "verifier.tlp".

example.pl:
example.tlp:
        The definition of a simple automaton and some convenient LTL
        queries.

        For the ".tlp" version: just load the example into "dra" (by writing
            prog( example ).  and then type "q1.", "q2." etc. to that
            interpreter's top level.

example2.pl:
example2.tlp:
        A somewhat more complex example similar to "example.tlp".

example3.pl:
example3.tlp:
        A smaller example.

small_example.pl:
small_example.tlp:
        An even smaller example, good for tracing while troubleshooting the
        tabling interpreter.

microwave.pl:
microwave.tlp:
        Another example in the same spirit.  This one is actually a
        (somewhat simplified) model of a microwave oven.

--------------------------------------------------------------------------------
