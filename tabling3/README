--------------------------------------------------------------------------------

This directory includes the following files:

dra.ecl:
        A wrapping of dra_common.pl for Eclipse.

dra.pl:
        A wrapping of dra_common.pl for Sicstus.

drap.pl:
        A wrapping of dra_common.pl for SWI Prolog.  Safe for cyclic terms, but
        DRA can be 2.5 times slower than with Sicstus (examples/XSB/ham.tlp).

drapf.pl:
        A wrapping of dra_common.pl for SWI Prolog: this one makes DRA
        significantly faster than with Sicstus (on examples/XSB/ham.tlp).
        HOWEVER, it cannot handle cyclic terms, so is not to be used for
        programs with coinduction.

dra_builtins.pl:
        This file contains declarations of built-in predicates that are
        allowed by the "dra" interpreter.  Support for many new predicates
        can be obtained simply by extending the table, but some may require
        special support from the interpreter.  In particular, addition of the
        cut would be non-trivial (and probably ill-advised).

dra_common.pl:
        The code for an interpreter that implements tabling by using "Dynamic
        Reordering of Alternatives".  This interpreter can handle programs
        that use not only tabling, but also co-logic programming (even when
        the same predicate is both coinductive and tabled).

        Just load 'dra' into Eclipse or Sicstus!  The head comment (better
        yet, the manual in "../doc/manual.pdf") explains how to use it.

dra_table_assert.pl:
        An implementation of the table of answers for DRA: answers are stored as
        clauses.

dra_table_record.pl:
        An implementation of the table of answers for DRA: answers are stored in
        the internal database.

ex.tlp:
ex2.tlp:
        Two trivial prototypical examples.  See how ex.tlp gives only one
        answer, because of the combination of coinduction with tabling.

examples:
        Some examples of tabled programs, all with the extension
        ".tlp".

boolean_operations.pl:
        Evaluation of simple boolean expressions.

clause_verification.pl:
        Utilities for checking whether clauses are well-formed.

checker.pl:
        This is a general utility for checking a file with a Prolog program.
        It is tailored to SWI Prolog.
        It could be improved to take into account modules and inclusion of
        files.  DCGs are not properly checked, either.

compatibility_utilities.ecl:
compatibility_utilities.pl:
        Predicates that hide some incompatibilities between Eclipse and
        Sicstus.

dlist.pl:
        Basic operations on difference lists.

errors_and_warnings.pl:
        Utilities for producing diagnostics (and aborting execution in the
        case of errors).

goal_table_in_tree.pl:
        A data structure for keeping Prolog goals, implemented as an open
        tree of open lists.

goal_table_simple.pl:
        A data structure for keeping Prolog goals, implemented as an open
        list.

higher_order.pl:
        A few predicates for higher order operations (simulating some basic
        operations known from functional programming).

io_utilities.pl:
        Utilities that have to do with input and output.

Makefile:
        Creates a stand-alone clause checker (advanced checking for singleton
        variables).

olist.pl:
        Basic operations on open lists.

open_set_in_tree.pl:
        Simple operations on open sets, used by utilities.

otree.pl:
        Basic operations on open trees.

program_consistency.pl:
        An auxiliary of top_level: checks general consistency of the loaded
        program.

output_equation.pl:
        Ronald de Haan's predicates for converting a cyclic term to a set
        of equations (used in top_level.pl).

README:
        This file.

set_in_list.pl:
        Simple operations on smallish sets, used by utilities.

top_level.pl:
        A simple top level (i.e., code that reads and stores programs,
        executes queries etc.).  It is loaded automatically by those
        metainterpreters that need it.

utilities.pl:
        A set of useful predicates, loaded and called by the other programs.
        Loads also most of the other utility files in this directory.

vardict_utilities.pl:
        Utilities that have to do with variable dictionaries.

--------

--------------------------------------------------------------------------------
--------------------------------------------------------------------------------

This directory includes the following files:

colp.ecl:
        Load this to run colp_common.pl with Eclipse.

colp.pl:
        Load this to run colp_common.pl with Sicstus.

colpp.pl:
        Load this to run colp_common.pl with SWI Prolog.

colp_common.pl:
        A metainterpreter of "co-logic programming".
        The head comment explains how to use it.

colp_builtins.pl:
        This file contains declarations of built-in predicates that are
        allowed by the "colp" interpreter.  Support for many new predicates
        can be obtained simply by extending the table, but some may require
        special support from the interpreter.  In particular, addition of the
        cut would be non-trivial (and probably ill-advised).

translate_colp.ecl:
        Load this to run translate_colp_common.pl with Eclipse.

translate_colp.pl:
        Load this to run translate_colp_common.pl with Sicstus.

translate_colpp.pl:
        Load this to run translate_colp_common.pl with SWI Prolog.

translate_colp_common.pl:
        A translator that converts "co-logic programming" programs into
        straightforward logic programs.  The head comment explains how to use
        it.

example.clp:
        This trivial file illustrates the use of file inclusion (works both
        with the metainterpreter and with the translator).  It includes
        another file that contains the real example.

examples:
        Some examples of coinductive programs, all with the extension ".clp".
        Files with translated programs will have the extension ".pl".

original:
        A directory that contains a metainterpreter (and an example)
        almost exactly as they appeared in Luke Simon's Ph.D. thesis.

--------------------------------------------------------------------------------
